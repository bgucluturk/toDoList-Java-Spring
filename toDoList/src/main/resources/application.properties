# Uygulamanın adını tanımlar. Bu, Spring Boot uygulamasının adıdır ve özellikle microservice mimarilerinde faydalıdır.
spring.application.name=toDoList

# Sunucunun hangi port üzerinden çalışacağını belirtir. Varsayılan olarak 8080'dir, burada 4444 portu kullanılmış.
server.port=4444

# ------------------------
# H2 Veritabanı Ayarları
# ------------------------

# H2 veritabanının URL'si. Bu durumda, "mem" kullanılarak hafızada (in-memory) bir veritabanı kullanılıyor. 
# "todolist" ismi veritabanı adı olarak belirlenmiştir.
spring.datasource.url=jdbc:h2:mem:todolist

# H2 veritabanı için kullanılacak JDBC sürücüsünün sınıf adı.
# H2, hafızada çalışan bir veritabanı olduğundan `org.h2.Driver` kullanılır.
spring.datasource.driver-class-name=org.h2.Driver

# Veritabanı kullanıcı adı. Bu örnekte "sa" olarak belirtilmiştir, çünkü H2 veritabanı için varsayılan kullanıcı adı genellikle "sa"dır.
spring.datasource.username=sa

# H2 veritabanı için kullanıcı şifresi. Bu örnekte boş bırakılmıştır çünkü H2 veritabanı için varsayılan bir şifre gerekmez.
spring.datasource.password=

# ------------------------
# JPA (Hibernate) Ayarları
# ------------------------

# Veritabanı şeması oluşturma stratejisini tanımlar.
# `update` değeri, Hibernate'in veritabanı şemasını uygulamanın mevcut modeline göre güncellemesine olanak tanır.
spring.jpa.hibernate.ddl-auto=update

# SQL sorgularını konsola yazdırmak için kullanılır. Bu ayar true olduğunda, yapılan tüm SQL sorguları konsola yazdırılır.
spring.jpa.show-sql=true

# ------------------------
# H2 Konsol Ayarları
# ------------------------

# H2 veritabanı konsolunun aktif olup olmadığını belirler. Eğer true olarak ayarlanırsa, H2 konsoluna tarayıcı üzerinden erişilebilir.
spring.h2.console.enabled=true

# H2 konsolunun yolu. Bu, tarayıcıda `/h2-console` yolu üzerinden H2 veritabanı konsoluna erişim sağlar.
# H2 veritabanı konsolunu web tarayıcısı üzerinden incelemek için bu yolu kullanabilirsiniz.
spring.h2.console.path=/h2-console





